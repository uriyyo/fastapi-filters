[tool.poetry]
name = "fastapi-filters"
version = "0.3.0"
description = "fastapi-filters"
authors = ["Yurii Karabas <1998uriyyo@gmail.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/uriyyo/fastapi-filters"
packages = [{ include = "fastapi_filters" }]
classifiers = [
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Programming Language :: Python :: 3 :: Only',
]

[tool.poetry.dependencies]
python = "^3.9"
pydantic = "^2.0.0"
fastapi = ">=0.100.0"
typing-extensions = "^4.4.0"
sqlalchemy = { version = "^2.0.0", optional = true }
tortoise-orm = { version = ">=0.20,<0.25", optional = true }

[tool.poetry.group.dev.dependencies]
pytest = ">=7.2,<9.0"
pytest-cov = ">=4,<7"
pytest-asyncio = ">=0.20.3,<0.26.1"
httpx = ">=0.23.3,<0.29.0"
asgi-lifespan = "^2.0.0"
ruff = ">=0.5.1,<0.11.5"
mypy = ">=0.991,<1.16"
pre-commit = ">=2.21,<5.0"
uvicorn = ">=0.20,<0.35"
dirty-equals = ">=0.6,<0.10"
faker = ">=19.3,<38.0"
asyncpg = ">=0.28,<0.31"

[tool.poetry.extras]
sqlalchemy = ["sqlalchemy"]
tortoise-orm = ["tortoise-orm"]
all = ["sqlalchemy", "tortoise-orm"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "session"

addopts = """
"""

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
     # single rule exclude
    "B008",    # do not perform function calls in argument defaults
    "S101",    # use of assert detected
    "SIM114",  # allow have multiplie ifs with same body
    "TRY003",  # allow long exc message
    "RUF100",  # allow unused noqa
    "RUF012",  # allow mutable class var
    "COM812",  # will be handled by ruff format
    "ISC001",  # will be handled by ruff format
    "SLF001",  # allow access to private member
    "N806",    # allow variable name to start from uppercase letter
    "N805",    # ignore first argument name check
    "N818",    # ignore exception name should ends with Error suffix
    "FAST002", # allow to use non-annotated dependencies
    "PLR0913",  # allow more than 5 arguments
    "PLR2004", # allow to compare with "magic numbers"
    "UP007",   # ignore X | Y annotation suggestion
    "TC001",   # ignore moving things to if TYPE_CHECKING block
    "TC002",   # ignore moving things to if TYPE_CHECKING block
    "TC003",   # ignore moving things to if TYPE_CHECKING block
    "TC006",   # ignore add quotes to type expression in typing.cast()
    "A005",    # allow module name to shadow a Python standard-library module
    "PLW2901", # ignore loop variable overwrite
    "S602",    # ignore subprocess.popen with shell=True
    "S307",    # ignore literal eval
    "ERA001",  # ignore commented-out code

    # full rule exclude
    "D",    # ignore docstrings
    "FA",  # ignore future annotations
    "ANN", # ignore annotations
    "FIX", # ignore FIXMEs
    "TD",  # ignore all TODOs
    "ARG", # ignore unused arguments
    "FBT", # ignore flake8-boolean-trap
    "EM",  # ignore error message formatting
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".venv",
]
per-file-ignores = {"tests/mypy/*" = ["E501"]}
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.lint.ruff.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.9"
strict = true
follow_imports = "normal"
ignore_missing_imports = true
no_implicit_reexport = false
show_column_numbers = true
show_error_codes = true

[tool.coverage.paths]
source = ["fastapi_filters"]

[tool.coverage.run]
source = ["fastapi_filters"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abstractmethod",
    "@overload",
    "if TYPE_CHECKING:",
]
